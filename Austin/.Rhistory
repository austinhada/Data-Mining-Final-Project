getwd()
knitr::opts_chunk$set(echo = TRUE)
dat1 <- "C:/Users/hadamul/OneDrive/Graduate school/Semester 4/Data Mining/Data-Mining-Final-Project/Life Expectancy Data.csv"
sum(is.na(dat1))
sum(apply(dat1,2,is.na))
dat1 <- read.csv("C:/Users/hadamul/OneDrive/Graduate school/Semester 4/Data Mining/Data-Mining-Final-Project/Life Expectancy Data.csv")
sum(apply(dat1,2,is.na))
sum(apply(filter(dat1, Year==2014),2,is.na))
dat1 <- read.csv("C:/Users/hadamul/OneDrive/Graduate school/Semester 4/Data Mining/Data-Mining-Final-Project/Life Expectancy Data.csv")
sum(apply(dplyr::filter(dat1, Year==2014),2,is.na))
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(tidyverse)
data <- read.csv("C:/Users/14193/Downloads/Life Expectancy Data.csv") %>%
filter(Year==2014)
library(magrittr)
library(tidyverse)
data <- read.csv("C:/Users/14193/Downloads/Life Expectancy Data.csv") %>%
filter(Year==2014)
dat <- read.csv("C:/Users/drumm/OneDrive/Graduate school/Semester 4/Data Mining/Data-Mining-Final-Project/life14.csv")
library(sampling)
library(tidyverse)
library(rworldmap)
library(mclust)
dat <- read.csv("C:/Users/hadamul/OneDrive/Graduate school/Semester 4/Data Mining/Data-Mining-Final-Project/life14.csv")
load("C:/Users/hadamul/OneDrive/Graduate school/Semester 4/Data Mining/Data-Mining-Final-Project/initKnnImp.RData")
View(dat)
View(knnOutput)
knitr::opts_chunk$set(echo = TRUE)
library(sampling)
library(tidyverse)
library(rworldmap)
library(mclust)
dat <- read.csv("C:/Users/hadamul/OneDrive/Graduate school/Semester 4/Data Mining/Data-Mining-Final-Project/life14.csv")
load("C:/Users/hadamul/OneDrive/Graduate school/Semester 4/Data Mining/Data-Mining-Final-Project/initKnnImp.RData")
dat_scaled <- scale(knnOutput)
RNGkind (sample.kind = "Rounding")
set.seed(0)
nseeds <- 1000
nk <- 20
seeds <- ceiling(runif(nseeds,0,900000))
#
# kmean_matrix  <- matrix(NA, nrow = nseeds, ncol = nk)
#
# for (k in 1:nk) {
#   seed_iter = 0
#   for (s in seeds) {
#
#     set.seed(s)
#     seed_iter <- seed_iter + 1
#
#     kmean_matrix[seed_iter,k] <- kmeans(dat_scaled, centers = k)$tot.withinss
#   }
# }
# save(kmean_matrix, file = "kmean_matrix.RData")
load("kmean_matrix.RData")
plot(1:nk,apply(kmean_matrix, 2, min),
type = "b",
ylab = "wss",
xlab = "k")
kmean_seed3 <- seeds[which(kmean_matrix[,3]==min(kmean_matrix[,3]))[1]]
kmean_seed4 <- seeds[which(kmean_matrix[,4]==min(kmean_matrix[,4]))[1]]
kmean_seed5 <- seeds[which(kmean_matrix[,5]==min(kmean_matrix[,5]))[1]]
kmean_seed6 <- seeds[which(kmean_matrix[,6]==min(kmean_matrix[,6]))[1]]
kmean_seed7 <- seeds[which(kmean_matrix[,7]==min(kmean_matrix[,7]))[1]]
set.seed(kmean_seed3)
means3 <- kmeans(dat_scaled, centers = 3)
set.seed(kmean_seed4)
means4 <- kmeans(dat_scaled, centers = 4)
set.seed(kmean_seed5)
means5 <- kmeans(dat_scaled, centers = 5)
set.seed(kmean_seed6)
means6 <- kmeans(dat_scaled, centers = 6)
set.seed(kmean_seed7)
means7 <- kmeans(dat_scaled, centers = 7)
means3$withinss
means4$withinss
means5$withinss
means6$withinss
means7$withinss
clust3 <- cbind(dat[,1:3],cluster = means3$cluster,knnOutput)
clust4 <- cbind(dat[,1:3],cluster = means4$cluster,knnOutput)
clust5 <- cbind(dat[,1:3],cluster = means5$cluster,knnOutput)
clust6 <- cbind(dat[,1:3],cluster = means6$cluster,knnOutput)
clust7 <- cbind(dat[,1:3],cluster = means7$cluster,knnOutput)
clust3_map <- joinCountryData2Map(clust3, joinCode = "NAME", nameJoinColumn = "Country", )
par(mar=c(0,0,1,0))
mapCountryData(mapToPlot = clust3_map,
nameColumnToPlot="cluster",
catMethod="categorical",
colourPalette = "rainbow")
clust4_map <- joinCountryData2Map(clust4, joinCode = "NAME", nameJoinColumn = "Country", verbose = T)
par(mar=c(0,0,1,0))
mapCountryData(mapToPlot = clust4_map,
nameColumnToPlot="cluster",
catMethod="categorical",
colourPalette = "rainbow")
clust5_map <- joinCountryData2Map(clust5, joinCode = "NAME", nameJoinColumn = "Country", verbose = T)
par(mar=c(0,0,1,0))
mapCountryData(mapToPlot = clust5_map,
nameColumnToPlot="cluster",
catMethod="categorical",
colourPalette = "rainbow")
# mb_rep <- 20
# mb_matrix <- matrix(NA, 14, mb_rep)
#
# for (k in 1:mb_rep) {
#   mb_matrix[,k] <- Mclust(knnOutput, k)$BIC
# }
#
# save(mb_matrix,file = "mb_matrix.RData")
load("mb_matrix.RData")
plot(x=1:20,
y=apply(mb_matrix, 2, function(i) min(i,na.rm = T)),
type = "l",
xlab = "k",
ylab = "BIC")
mb4 <- Mclust(knnOutput, 4, verbose = F)
mb4$parameters
mb4$parameters$mean
round(mb4$parameters$mean,3)
round(mb4$parameters$mean)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(FNN)
library(dplyr)
dat <- read.csv("C:/Users/hadamul/OneDrive/Graduate school/Semester 4/Data Mining/Data-Mining-Final-Project/life14.csv") %>% select(-BMI)
dat_numeric <- select(dat, -(1:3))
imputed_dat <- dat
apply(dat_numeric, 2, function(i)range(i,na.rm = T))
# Row numbers that have NA in the Total.expenditure column
naRow_TotExpMed <- !complete.cases(dat_numeric[,"Total.expenditure"])
# Grab rows with NA in the Total.expenditure columns
TotExpMed_incomplete <- dat_numeric[naRow_TotExpMed,]
# Getting rid of Columns with NA
TotExpMed_incomplete <- TotExpMed_incomplete[,colSums(!is.na(TotExpMed_incomplete))==nrow(TotExpMed_incomplete)]
# Removing the NA Total.expenditure rows, and choosing the columns that are complete
# for the above dataset
TotExpMed_complete <- dat_numeric[!naRow_TotExpMed,                              # Row
c("Total.expenditure",names(TotExpMed_incomplete))]  # Col
# Getting only the complete rows
TotExpMed_complete <- TotExpMed_complete[complete.cases(TotExpMed_complete),]
scaled_TotExpMed_comp <- scale(TotExpMed_complete[,-1])
TotExpMed_Attributes <- attributes(scaled_TotExpMed_comp)
scaled_TotExpMed_incomp <- scale(TotExpMed_incomplete,
center = TotExpMed_Attributes$`scaled:center`,
scale = TotExpMed_Attributes$`scaled:scale`)
# Setting up LOOCV
train_control <- trainControl(method = "LOOCV")
# Data mining k
loocv_TotExpMed <- train(Life.expectancy ~ .,
data = scaled_TotExpMed_comp,
method = "knn",
trControl = train_control,
preProcess = c("center","scale"),
tuneGrid = data.frame(k=1:10))   #there are 10 variables
plot(loocv_TotExpMed)
# Getting the optimized k nearest neighbors
TotExpMed_nn <- get.knnx(scaled_TotExpMed_comp, scaled_TotExpMed_incomp, k=4)
TotExpMed_index <- TotExpMed_nn$nn.index
TotExpMed_complete$Total.expenditure[TotExpMed_index]
# Getting the optimized k nearest neighbors
TotExpMed_nn <- get.knnx(scaled_TotExpMed_comp, scaled_TotExpMed_incomp, k=4)
TotExpMed_index <- TotExpMed_nn$nn.index
TotExpMed_complete$Total.expenditure[TotExpMed_index]
