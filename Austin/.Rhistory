# Number of rows
n <- nrow(dat_numeric)
# Number of columns
numcol <- ncol(dat_numeric)
# Data to a matrix
data.mat <- as.matrix(scaled_together)
# indices of rows with NA
tgt.nas <- which(!complete.cases(dat_numeric))
# For every row containing NA
for (i in tgt.nas) {
# From the scale() documentation:
# If center is a numeric-alike vector with length equal to the number of
# columns of x, then each column of x has the corresponding value from center
# subtracted from it.
dist <- scale(x = complete_dat,
center = data.mat[i, ], # row with NA
scale = FALSE)
# Which column is the NA in?
tgtAs <- which(is.na(data.mat[i, ]))
# Remove the distances who's columns contain NA
dist <- dist[, -tgtAs]
# Calculates the Euclidean distance
dist <- sqrt(drop(dist^2 %*% rep(1, ncol(dist))))
# Gets the indices of the optimal number of nearest neighbors specified by optimal_k
ks <- order(dist)[seq(optimal_k)]
# Imputing the mean of the optimal number nearest neighbors
for (j in tgtAs) imputed_dat[i, j+1] <- mean(dat_numeric[-tgt.nas, j][ks])
}
summary(imputed_dat)
summary(dat)
summary(imputed_dat)
write.csv(imputed_dat, file = "C:/Users/hadamul/OneDrive/Graduate school/Semester 4/Data Mining/Data-Mining-Final-Project/imputedData.csv", row.names = F)
knitr::opts_chunk$set(echo = TRUE)
library(sampling)
library(tidyverse)
library(rworldmap)
library(mclust)
dat <- read.csv("C:/Users/hadamul/OneDrive/Graduate school/Semester 4/Data Mining/Data-Mining-Final-Project/imputedData.csv")
dat_scaled <- scale(select(dat, -Country, -HALE_Birth))
RNGkind (sample.kind = "Rounding")
set.seed(0)
nseeds <- 1000
nk <- 20
seeds <- ceiling(runif(nseeds,0,900000))
# kmean_matrix  <- matrix(NA, nrow = nseeds, ncol = nk)
#
# for (k in 1:nk) {
#   seed_iter = 0
#   for (s in seeds) {
#
#     set.seed(s)
#     seed_iter <- seed_iter + 1
#
#     kmean_matrix[seed_iter,k] <- kmeans(dat_scaled, centers = k)$tot.withinss
#   }
# }
# save(kmean_matrix, file = "kmean_matrix.RData")
load("kmean_matrix.RData")
plot(1:nk,apply(kmean_matrix, 2, min),
type = "l",
ylab = "wss",
xlab = "k")
kmean_seed2 <- seeds[which(kmean_matrix[,2]==min(kmean_matrix[,2]))[1]]
kmean_seed6 <- seeds[which(kmean_matrix[,6]==min(kmean_matrix[,6]))[1]]
set.seed(kmean_seed2)
means2 <- kmeans(dat_scaled, centers = 2)
set.seed(kmean_seed6)
means6 <- kmeans(dat_scaled, centers = 6)
means2$withinss
means6$withinss
clust2 <- cbind(select(dat, Country, HALE_Birth),cluster = means2$cluster,dat)
clust6 <- cbind(select(dat, Country, HALE_Birth),cluster = means6$cluster,dat)
kmean_seed2 <- seeds[which(kmean_matrix[,2]==min(kmean_matrix[,2]))[1]]
kmean_seed6 <- seeds[which(kmean_matrix[,6]==min(kmean_matrix[,6]))[1]]
set.seed(kmean_seed2)
means2 <- kmeans(dat_scaled, centers = 2)
set.seed(kmean_seed6)
means6 <- kmeans(dat_scaled, centers = 6)
means2$withinss
means6$withinss
clust2 <- cbind(select(dat, Country, HALE_Birth),cluster = means2$cluster,dat)
clust6 <- cbind(select(dat, Country, HALE_Birth),cluster = means6$cluster,dat)
clust2_map <- joinCountryData2Map(clust2, joinCode = "NAME",
nameJoinColumn = "Country")
par(mar=c(0,0,1,0))
mapCountryData(mapToPlot = clust2_map,
nameColumnToPlot="cluster",
catMethod="categorical",
colourPalette = "rainbow",)
clust6_map <- joinCountryData2Map(clust6, joinCode = "NAME", nameJoinColumn = "Country")
par(mar=c(0,0,1,0))
mapCountryData(mapToPlot = clust6_map,
nameColumnToPlot="cluster",
catMethod="categorical",
colourPalette = "rainbow")
# mb_rep <- 20
# mb_matrix <- matrix(NA, 14, mb_rep)
#
mb_dat <- select(dat, -Country, -HALE_Birth)
#
# for (k in 1:mb_rep) {
#   mb_matrix[,k] <- Mclust(mb_dat, k)$BIC
# }
#
# save(mb_matrix,file = "mb_matrix.RData")
load("mb_matrix.RData")
plot(x=1:20,
y=apply(mb_matrix, 2, function(i) min(i,na.rm = T)),
type = "b",
xlab = "k",
ylab = "BIC")
# mb3 <- Mclust(mb_dat, 3, verbose = F)
#
# save(mb3, file = "mb3.RData")
load("mb3.RData")
round(mb3$parameters$mean)
mbclust3 <- cbind(select(dat, Country, HALE_Birth),cluster = mb3$classification,dat)
mbclust3_map <- joinCountryData2Map(mbclust3, joinCode = "NAME", nameJoinColumn = "Country", )
par(mar=c(0,0,1,0))
mapCountryData(mapToPlot = mbclust3_map,
nameColumnToPlot="cluster",
catMethod="categorical",
colourPalette = "rainbow")
View(dat)
# mb_rep <- 20
# mb_matrix <- matrix(NA, 14, mb_rep)
#
mb_dat <- select(dat, -Country,-Measles -HALE_Birth)
knitr::opts_chunk$set(echo = TRUE)
library(sampling)
library(tidyverse)
library(rworldmap)
library(mclust)
dat <- read.csv("C:/Users/hadamul/OneDrive/Graduate school/Semester 4/Data Mining/Data-Mining-Final-Project/imputedData.csv")
dat_scaled <- scale(select(dat, -Country, -HALE_Birth))
RNGkind (sample.kind = "Rounding")
set.seed(0)
nseeds <- 1000
nk <- 20
seeds <- ceiling(runif(nseeds,0,900000))
# kmean_matrix  <- matrix(NA, nrow = nseeds, ncol = nk)
#
# for (k in 1:nk) {
#   seed_iter = 0
#   for (s in seeds) {
#
#     set.seed(s)
#     seed_iter <- seed_iter + 1
#
#     kmean_matrix[seed_iter,k] <- kmeans(dat_scaled, centers = k)$tot.withinss
#   }
# }
# save(kmean_matrix, file = "kmean_matrix.RData")
load("kmean_matrix.RData")
plot(1:nk,apply(kmean_matrix, 2, min),
type = "l",
ylab = "wss",
xlab = "k")
kmean_seed2 <- seeds[which(kmean_matrix[,2]==min(kmean_matrix[,2]))[1]]
kmean_seed6 <- seeds[which(kmean_matrix[,6]==min(kmean_matrix[,6]))[1]]
set.seed(kmean_seed2)
means2 <- kmeans(dat_scaled, centers = 2)
set.seed(kmean_seed6)
means6 <- kmeans(dat_scaled, centers = 6)
means2$withinss
means6$withinss
clust2 <- cbind(select(dat, Country, HALE_Birth),cluster = means2$cluster,dat)
clust6 <- cbind(select(dat, Country, HALE_Birth),cluster = means6$cluster,dat)
clust2_map <- joinCountryData2Map(clust2, joinCode = "NAME",
nameJoinColumn = "Country")
par(mar=c(0,0,1,0))
mapCountryData(mapToPlot = clust2_map,
nameColumnToPlot="cluster",
catMethod="categorical",
colourPalette = "rainbow",)
clust6_map <- joinCountryData2Map(clust6, joinCode = "NAME", nameJoinColumn = "Country")
par(mar=c(0,0,1,0))
mapCountryData(mapToPlot = clust6_map,
nameColumnToPlot="cluster",
catMethod="categorical",
colourPalette = "rainbow")
# mb_rep <- 20
# mb_matrix <- matrix(NA, 14, mb_rep)
#
mb_dat <- select(dat, -Country,-Measles -HALE_Birth)
# mb_rep <- 20
# mb_matrix <- matrix(NA, 14, mb_rep)
#
mb_dat <- select(dat, -Country,-Measles, -HALE_Birth)
load("mb_matrix.RData")
plot(x=1:20,
y=apply(mb_matrix, 2, function(i) min(i,na.rm = T)),
type = "b",
xlab = "k",
ylab = "BIC")
mb_rep <- 20
mb_matrix <- matrix(NA, 14, mb_rep)
mb_dat <- select(dat, -Country,-Measles, -HALE_Birth)
for (k in 1:mb_rep) {
mb_matrix[,k] <- Mclust(mb_dat, k)$BIC
}
plot(x=1:20,
y=apply(mb_matrix, 2, function(i) min(i,na.rm = T)),
type = "b",
xlab = "k",
ylab = "BIC")
dat_scaled <- scale(select(dat, -Country, -Measles, -HALE_Birth))
RNGkind (sample.kind = "Rounding")
set.seed(0)
nseeds <- 1000
nk <- 20
seeds <- ceiling(runif(nseeds,0,900000))
kmean_matrix  <- matrix(NA, nrow = nseeds, ncol = nk)
for (k in 1:nk) {
seed_iter = 0
for (s in seeds) {
set.seed(s)
seed_iter <- seed_iter + 1
kmean_matrix[seed_iter,k] <- kmeans(dat_scaled, centers = k)$tot.withinss
}
}
# save(kmean_matrix, file = "kmean_matrix.RData")
load("kmean_matrix.RData")
RNGkind (sample.kind = "Rounding")
set.seed(0)
nseeds <- 1000
nk <- 20
seeds <- ceiling(runif(nseeds,0,900000))
kmean_matrix  <- matrix(NA, nrow = nseeds, ncol = nk)
for (k in 1:nk) {
seed_iter = 0
for (s in seeds) {
set.seed(s)
seed_iter <- seed_iter + 1
kmean_matrix[seed_iter,k] <- kmeans(dat_scaled, centers = k)$tot.withinss
}
}
plot(1:nk,apply(kmean_matrix, 2, min),
type = "l",
ylab = "wss",
xlab = "k")
plot(1:nk,apply(kmean_matrix, 2, min),
type = "b",
ylab = "wss",
xlab = "k")
plot(1:nk,apply(kmean_matrix, 2, min),
type = "l",
ylab = "wss",
xlab = "k")
kmean_seed2 <- seeds[which(kmean_matrix[,2]==min(kmean_matrix[,2]))[1]]
kmean_seed4 <- seeds[which(kmean_matrix[,4]==min(kmean_matrix[,4]))[1]]
kmean_seed5 <- seeds[which(kmean_matrix[,2]==min(kmean_matrix[,5]))[1]]
kmean_seed6 <- seeds[which(kmean_matrix[,6]==min(kmean_matrix[,6]))[1]]
set.seed(kmean_seed2)
means2 <- kmeans(dat_scaled, centers = 2)
set.seed(kmean_seed4)
means4 <- kmeans(dat_scaled, centers = 4)
set.seed(kmean_seed5)
kmean_seed5
kmean_seed5 <- seeds[which(kmean_matrix[,5]==min(kmean_matrix[,5]))[1]]
kmean_seed6 <- seeds[which(kmean_matrix[,6]==min(kmean_matrix[,6]))[1]]
set.seed(kmean_seed2)
means2 <- kmeans(dat_scaled, centers = 2)
set.seed(kmean_seed4)
means4 <- kmeans(dat_scaled, centers = 4)
set.seed(kmean_seed5)
means5 <- kmeans(dat_scaled, centers = 5)
set.seed(kmean_seed6)
means6 <- kmeans(dat_scaled, centers = 6)
means2$withinss
means6$withinss
clust2 <- cbind(select(dat, Country, HALE_Birth),cluster = means2$cluster,dat)
clust4 <- cbind(select(dat, Country, HALE_Birth),cluster = means4$cluster,dat)
clust5 <- cbind(select(dat, Country, HALE_Birth),cluster = means5$cluster,dat)
clust6 <- cbind(select(dat, Country, HALE_Birth),cluster = means6$cluster,dat)
clust5_map <- joinCountryData2Map(clust5, joinCode = "NAME",
nameJoinColumn = "Country")
par(mar=c(0,0,1,0))
mapCountryData(mapToPlot = clust5_map,
nameColumnToPlot="cluster",
catMethod="categorical",
colourPalette = "rainbow",)
clust4_map <- joinCountryData2Map(clust4, joinCode = "NAME",
nameJoinColumn = "Country")
par(mar=c(0,0,1,0))
mapCountryData(mapToPlot = clust4_map,
nameColumnToPlot="cluster",
catMethod="categorical",
colourPalette = "rainbow",)
clust2_map <- joinCountryData2Map(clust2, joinCode = "NAME",
nameJoinColumn = "Country")
par(mar=c(0,0,1,0))
mapCountryData(mapToPlot = clust2_map,
nameColumnToPlot="cluster",
catMethod="categorical",
colourPalette = "rainbow",)
mb3 <- Mclust(mb_dat, 3, verbose = F)
mb3 <- Mclust(mb_dat, 4, verbose = F)
mbclust3 <- cbind(select(dat, Country, HALE_Birth),cluster = mb3$classification,dat)
mbclust3_map <- joinCountryData2Map(mbclust3, joinCode = "NAME", nameJoinColumn = "Country", )
par(mar=c(0,0,1,0))
mapCountryData(mapToPlot = mbclust3_map,
nameColumnToPlot="cluster",
catMethod="categorical",
colourPalette = "rainbow")
mb3 <- Mclust(mb_dat, , verbose = F)
mb3 <- Mclust(mb_dat, 3, verbose = F)
mb3 <- Mclust(mb_dat, 3, verbose = F)
mbclust3 <- cbind(select(dat, Country, HALE_Birth),cluster = mb3$classification,dat)
mbclust3_map <- joinCountryData2Map(mbclust3, joinCode = "NAME", nameJoinColumn = "Country", )
par(mar=c(0,0,1,0))
mapCountryData(mapToPlot = mbclust3_map,
nameColumnToPlot="cluster",
catMethod="categorical",
colourPalette = "rainbow")
knitr::opts_chunk$set(echo = TRUE)
dat <- read.csv("C:/Users/hadamul/OneDrive/Graduate school/Semester 4/Data Mining/Data-Mining-Final-Project/life14updated.csv")
dat_numeric <- select(dat, -Country)
source(caret)
source("caret")
citation("caret")
citation("DMwR")
citation()
citation("RStudio")
cite
cite(R)
cite("R")
Citation("R")
RStudio.Version()
citation(FNN)
citation("FNN")
citation("mclust")
knitr::opts_chunk$set(echo = TRUE)
library(sampling)
library(tidyverse)
library(rworldmap)
library(mclust)
dat <- read.csv("C:/Users/hadamul/OneDrive/Graduate school/Semester 4/Data Mining/Data-Mining-Final-Project/imputedData.csv")
dat_scaled <- scale(select(dat, -Country, -HALE_Birth))
RNGkind (sample.kind = "Rounding")
set.seed(0)
nseeds <- 1000
nk <- 20
seeds <- ceiling(runif(nseeds,0,900000))
# kmean_matrix  <- matrix(NA, nrow = nseeds, ncol = nk)
#
# for (k in 1:nk) {
#   seed_iter = 0
#   for (s in seeds) {
#
#     set.seed(s)
#     seed_iter <- seed_iter + 1
#
#     kmean_matrix[seed_iter,k] <- kmeans(dat_scaled, centers = k)$tot.withinss
#   }
# }
# save(kmean_matrix, file = "kmean_matrix.RData")
load("kmean_matrix.RData")
plot(1:nk,apply(kmean_matrix, 2, min),
type = "b",
ylab = "wss",
xlab = "k")
kmean_seed4 <- seeds[which(kmean_matrix[,4]==min(kmean_matrix[,4]))[1]]
set.seed(kmean_seed4)
means4 <- kmeans(dat_scaled, centers = 4)
means4.centers.rescaled <-  means4$centers
for (j in 1:11){
means4.centers.rescaled[,j] <- attributes(dat_scaled)$`scaled:center`[j] +
means4$centers[,j]*attributes(dat_scaled)$`scaled:scale`[j]
}
km4id <- ifelse(means4$cluster == 1, 2,
ifelse(means4$cluster == 2, 3,
ifelse(means4$cluster == 3, 1, 4)))
kclust4 <- cbind(select(dat, Country, HALE_Birth),clusters = as.factor(km4id),select(dat, -Country, -HALE_Birth)) %>% as.data.frame()
kclust4_map <- joinCountryData2Map(kclust4, joinCode = "NAME",
nameJoinColumn = "Country")
par(mar=c(0,0,1,0))
mapCountryData(mapToPlot = kclust4_map,
nameColumnToPlot="clusters",
catMethod="categorical",
colourPalette = RColorBrewer::brewer.pal(4,'Set1'),
mapTitle = "4-Means Approach")
plot4id <- ifelse(1:4 == 1, 2,
ifelse(1:4 == 2, 3,
ifelse(1:4 == 3, 1, 4)))
par(oma=c(6,2,1,1), mar = c(4,4,2,1) + 0.1)
plot(x = c(1,11), y = c(1,300), type = "n", xlab = "", ylab = "Kmeans centroids",
xaxt='n', main = "Clustering using Kmeans")
axis(side = 1, at=seq(1,11,1), las=2, labels = colnames(dat_scaled))
xseq <- seq(1,11,1)
col.seq <- RColorBrewer::brewer.pal(4,'Set1')
for (k in 1:4){
lines(x = xseq, y = means4.centers.rescaled[plot4id,][k,],
col=col.seq[k], lty=2)
}
legend("topright", col = col.seq, lty = 2,
legend = c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4"))
mapCountryData(mapToPlot = kclust4_map,
nameColumnToPlot="clusters",
catMethod="categorical",
colourPalette = RColorBrewer::brewer.pal(4,'Set1'),
mapTitle = "4-Means Clustering Approach",mapRegion = "oceania")
mapCountryData(mapToPlot = kclust4_map,
nameColumnToPlot="clusters",
catMethod="categorical",
colourPalette = RColorBrewer::brewer.pal(4,'Set1'),
mapTitle = "4-Means Clustering Approach")
getwd()
svg("C:/Users/hadamul/OneDrive/Graduate school/Semester 4/Data Mining/Data-Mining-Final-Project/Plots/4MeansCluster.svg")
par(mar=c(0,0,1,0))
mapCountryData(mapToPlot = kclust4_map,
nameColumnToPlot="clusters",
catMethod="categorical",
colourPalette = RColorBrewer::brewer.pal(4,'Set1'),
mapTitle = "4-Means Clustering Approach")
dev.off()
# svg("C:/Users/hadamul/OneDrive/Graduate school/Semester 4/Data Mining/Data-Mining-Final-Project/Plots/4MeansCluster.svg")
plot(1:nk,apply(kmean_matrix, 2, min),
type = "b",
ylab = "Within Sum of Squares",
xlab = "Number of Centroids")
# dev.off()
axis(font = "Times New Roman")
demo(Hershey)
# svg("C:/Users/hadamul/OneDrive/Graduate school/Semester 4/Data Mining/Data-Mining-Final-Project/Plots/4MeansCluster.svg")
plot(1:nk,apply(kmean_matrix, 2, min),
type = "b",
ylab = "Within Sum of Squares",
xlab = "Number of Centroids")
knitr::opts_chunk$set(echo = TRUE)
library(sampling)
library(tidyverse)
library(rworldmap)
library(mclust)
dat <- read.csv("C:/Users/hadamul/OneDrive/Graduate school/Semester 4/Data Mining/Data-Mining-Final-Project/imputedData.csv")
dat_scaled <- scale(select(dat, -Country, -HALE_Birth))
RNGkind (sample.kind = "Rounding")
set.seed(0)
nseeds <- 1000
nk <- 20
seeds <- ceiling(runif(nseeds,0,900000))
# kmean_matrix  <- matrix(NA, nrow = nseeds, ncol = nk)
#
# for (k in 1:nk) {
#   seed_iter = 0
#   for (s in seeds) {
#
#     set.seed(s)
#     seed_iter <- seed_iter + 1
#
#     kmean_matrix[seed_iter,k] <- kmeans(dat_scaled, centers = k)$tot.withinss
#   }
# }
# save(kmean_matrix, file = "kmean_matrix.RData")
load("kmean_matrix.RData")
svg("C:/Users/hadamul/OneDrive/Graduate school/Semester 4/Data Mining/Data-Mining-Final-Project/Plots/4MeansCluster.svg")
plot(1:nk,apply(kmean_matrix, 2, min),
type = "b",
ylab = "Within Sum of Squares",
xlab = "Number of Centroids")
dev.off()
plot(1:nk,apply(kmean_matrix, 2, min),
type = "b",
ylab = "Within Sum of Squares",
xlab = "Number of Centroids")
dev.size()
svg("C:/Users/hadamul/OneDrive/Graduate school/Semester 4/Data Mining/Data-Mining-Final-Project/Plots/4MeansCluster.svg",
width = 7.291667, height = 4.500000)
plot(1:nk,apply(kmean_matrix, 2, min),
type = "b",
ylab = "Within Sum of Squares",
xlab = "Number of Centroids")
dev.off()
svg("C:/Users/hadamul/OneDrive/Graduate school/Semester 4/Data Mining/Data-Mining-Final-Project/Plots/4MeansCluster.svg",
width = 7.291667, height = 4.500000)
plot(1:nk,apply(kmean_matrix, 2, min),
type = "b",
ylab = "Within Sum of Squares",
xlab = "Number of Centroids")
dev.off()
svg("C:/Users/hadamul/OneDrive/Graduate school/Semester 4/Data Mining/Data-Mining-Final-Project/Plots/4MeansCluster.svg",
width = 7.291667, height = 4.500000)
plot(1:nk,apply(kmean_matrix, 2, min),
type = "b",
ylab = "Within Sum of Squares",
xlab = "Number of Centroids")
dev.off()
svg("C:/Users/hadamul/OneDrive/Graduate school/Semester 4/Data Mining/Data-Mining-Final-Project/Plots/kMeansWSS.svg",
width = 7.291667, height = 4.500000)
plot(1:nk,apply(kmean_matrix, 2, min),
type = "b",
ylab = "Within Sum of Squares",
xlab = "Number of Centroids")
dev.off()
plot(1:nk,apply(kmean_matrix, 2, min),
type = "b",
main = "**k***-Means",
ylab = "Within Sum of Squares",
xlab = "Number of Centroids")
plot(1:nk,apply(kmean_matrix, 2, min),
type = "b",
main = "*k*-Means",
ylab = "Within Sum of Squares",
xlab = "Number of Centroids")
svg("C:/Users/hadamul/OneDrive/Graduate school/Semester 4/Data Mining/Data-Mining-Final-Project/Plots/kMeansWSS.svg",
width = 7.291667, height = 4.500000)
plot(1:nk,apply(kmean_matrix, 2, min),
type = "b",
main = "k-Means",
ylab = "Within Sum of Squares",
xlab = "Number of Centroids")
dev.off()
