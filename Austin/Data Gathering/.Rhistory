knitr::opts_chunk$set(echo = TRUE)
fulldat <- read.csv("newdat.csv")
fulldat[,-1] <- apply(fulldat[,-1],2,as.numeric)
View(fulldat)
incomplete_dat <- fulldat[incomplete_ind,]
incomplete_ind <- which(apply(fulldat, 1, function(i) sum(is.na(i)))>2 | is.na(fulldat$HALE_Birth))
incomplete_dat <- fulldat[incomplete_ind,]
View(incomplete_dat)
incomplete_dat <- fulldat[incomplete_ind,]
complete_dat <- fulldat[-incomplete_ind,]
knitr::opts_chunk$set(echo = TRUE)
dat <- read.csv("C:/Users/hadamul/OneDrive/Graduate school/Semester 4/Data Mining/Data-Mining-Final-Project/life14updated.csv")
dat_numeric <- select(dat, -Country)
dat <- read.csv("C:/Users/hadamul/OneDrive/Graduate school/Semester 4/Data Mining/Data-Mining-Final-Project/life14updated.csv")
dat_numeric <- select(dat, -Country)
imputed_dat <- dat
apply(dat_numeric, 2, function(i)sum(is.na(i)))
library(caret)
library(FNN)
library(dplyr)
dat <- read.csv("C:/Users/hadamul/OneDrive/Graduate school/Semester 4/Data Mining/Data-Mining-Final-Project/life14updated.csv")
dat_numeric <- select(dat, -Country)
imputed_dat <- dat
apply(dat_numeric, 2, function(i)sum(is.na(i)))
na_columns <- colSums(is.na(dat))
na_columns[na_columns >0]
# Row numbers that have NA in the HepB column
naRow_HepB <- !complete.cases(dat_numeric[,"HepB"])
# Grab rows with NA in the HepB columns
HepB_incomplete <- dat_numeric[naRow_HepB,]
View(HepB_incomplete)
dat$Country[,naRow_HepB]
dat$Country[naRow_HepB,]
# Row numbers that have NA in the HepB column
naRow_HepB <- !complete.cases(dat_numeric[,"HepB"])
naRow_HepB
# Row numbers that have NA in the HepB column
naRow_HepB <- !complete.cases(dat_numeric[,"HepB"])
dat$Country[naRow_HepB,]
dat$Country[naRow_HepB]
na_columns <- colSums(is.na(dat))
na_columns[na_columns >0]
knitr::opts_chunk$set(echo = TRUE)
library(sampling)
library(tidyverse)
library(rworldmap)
library(mclust)
dat <- read.csv("C:/Users/drumm/OneDrive/Graduate school/Semester 4/Data Mining/Data-Mining-Final-Project/imputedData.csv")
dat <- read.csv("C:/Users/drumm/OneDrive/Graduate school/Semester 4/Data Mining/Data-Mining-Final-Project/imputedData.csv")
dat <- read.csv("C:/Users/hadamul/OneDrive/Graduate school/Semester 4/Data Mining/Data-Mining-Final-Project/imputedData.csv")
dat_scaled <- scale(select(dat, -Country, -HALE_Birth))
RNGkind (sample.kind = "Rounding")
set.seed(0)
nseeds <- 1000
nk <- 20
seeds <- ceiling(runif(nseeds,0,900000))
# kmean_matrix  <- matrix(NA, nrow = nseeds, ncol = nk)
#
# for (k in 1:nk) {
#   seed_iter = 0
#   for (s in seeds) {
#
#     set.seed(s)
#     seed_iter <- seed_iter + 1
#
#     kmean_matrix[seed_iter,k] <- kmeans(dat_scaled, centers = k)$tot.withinss
#   }
# }
# save(kmean_matrix, file = "kmean_matrix.RData")
load("kmean_matrix.RData")
plot(1:nk,apply(kmean_matrix, 2, min),
type = "l",
ylab = "wss",
xlab = "k")
kmean_seed2 <- seeds[which(kmean_matrix[,2]==min(kmean_matrix[,2]))[1]]
kmean_seed6 <- seeds[which(kmean_matrix[,6]==min(kmean_matrix[,6]))[1]]
set.seed(kmean_seed2)
means2 <- kmeans(dat_scaled, centers = 2)
set.seed(kmean_seed6)
means6 <- kmeans(dat_scaled, centers = 6)
means2$withinss
means6$withinss
clust2 <- cbind(select(dat, Country, HALE_Birth),cluster = means2$cluster,dat)
clust6 <- cbind(select(dat, Country, HALE_Birth),cluster = means6$cluster,dat)
clust2_map <- joinCountryData2Map(clust2, joinCode = "NAME",
nameJoinColumn = "Country")
par(mar=c(0,0,1,0))
mapCountryData(mapToPlot = clust2_map,
nameColumnToPlot="cluster",
catMethod="categorical",
colourPalette = "rainbow",)
# mb_rep <- 20
# mb_matrix <- matrix(NA, 14, mb_rep)
#
mb_dat <- select(dat, -Country, -HALE_Birth)
#
# for (k in 1:mb_rep) {
#   mb_matrix[,k] <- Mclust(mb_dat, k)$BIC
# }
#
# save(mb_matrix,file = "mb_matrix.RData")
load("mb_matrix.RData")
plot(x=1:20,
y=apply(mb_matrix, 2, function(i) min(i,na.rm = T)),
type = "b",
xlab = "k",
ylab = "BIC")
# mb3 <- Mclust(mb_dat, 3, verbose = F)
# mb19 <- Mclust(mb_dat, 19, verbose = F)
#
# save(mb3, file = "mb3.RData")
# save(mb19, file = "mb19.RData")
load("mb3.RData")
load("mb19.RData")
round(mb3$parameters$mean)
round(mb19$parameters$mean)
